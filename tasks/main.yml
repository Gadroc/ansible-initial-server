---
# tasks file for ansible-initial-server
## TODO:
## - check that it works with a default Ubuntu 18.04 ISO server install (probably using 'su' is not needed)

# For this block we use 'su' on first-run, because root cannot ssh into the server.
- name: KICKSTART
  block:
  - name: Ensure that python-apt and sudo is installed.
    apt:
      name: "{{ packages }}"
      state: present
    vars:
      packages:
      - python-apt
      - sudo

  ### SUDOERS ###
  - name: Check if iserver_user exists.
    shell: id -u "{{ iserver_user }}" > /dev/null 2>&1
    ignore_errors: True
    changed_when: false
    register: user_exists

  - name: Add the default user with passwordless sudo to sodoers.d
    template:
      src: default-user.j2
      dest: /etc/sudoers.d/default-user
      mode: 0440
    when: user_exists is succeeded

  # (optional)
  # - name: Ensure, that members of the sodoers group can do passwordless sudo.
  #   lineinfile:
  #     path: /etc/sudoers
  #     state: present
  #     regexp: '^%sudo\s'
  #     line: '%sudo  ALL=(ALL:ALL) NOPASSWD: ALL'

  # - name: Modify the default user, appending the group 'sudo' to the user's groups
  #   user:
  #     name: "{{ iserver_user }}"
  #     groups: sudo
  #     append: yes
  #   when: user_exists is succeeded

  ## End of block KICKSTART
  become: true
  become_method: "{{ iserver_become }}"

## Now that the default user can do passwordless sudo, run the rest with sudo.
- name: MAIN
  block:
  - name: Reset SSH connection to allow user changes to affect 'current login user'.
    meta: reset_connection

  ### BASE PACKAGES ###
  # replaces sources.list if iserver_repos has repos defined
  - name: Move original /etc/apt/sources.list to back it up (once).
    command: mv /etc/apt/sources.list /etc/apt/sources.list.original
    args:
      creates: /etc/apt/sources.list.original
    when: iserver_repos[0] != "undefined"

  # this requires python-apt
  - name: Add a set of specified repositories into sources list.
    apt_repository:
      repo: "{{ item }}"
      state: present
    loop: "{{ iserver_repos }}"
    when: iserver_repos[0] != "undefined"

  - name: Ensure, that all packages are updated and upgraded.
    apt:
      upgrade: "yes"
      update_cache: yes
      cache_valid_time: 86400 #One day

  - name: Ensure that initial packages are installed.
    apt:
      name: "{{ iserver_packages }}"
      state: present

  ### NETWORKING ###
  # see also https://github.com/holms/ansible-fqdn
  - name: Set hostname.
    hostname:
      name: "{{ iserver_hostname }}"
    register: new_hostname_set

  - name: Copy original hosts file to back it up (once).
    command: cp /etc/hosts /etc/hosts.original
    args:
      creates: /etc/hosts.original

  - name: Change hostname in etc/hosts, if hostname has changed.
    lineinfile:
      path: /etc/hosts
      state: present
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    loop:
      - { regexp: '^127.0.0.1', line: '127.0.0.1  localhost.localdomain  localhost' }
      - { regexp: '^{{ iserver_ip }}', line: '{{ iserver_ip }}  {{ iserver_fqdn }}  {{ iserver_hostname }}' }
    when: new_hostname_set is changed

  - name: Restart systemd-logind to activate hostname.
    service:
      name: systemd-logind
      state: restarted
    when: new_hostname_set is changed

  - name: Copy original /etc/issue (once) which is displayed before login.
    command: cp /etc/issue /etc/issue.original
    args:
      creates: /etc/issue.original

  # Note: run-parts doesn't run scripts with a .sh extension
  - name: Copy Debian script which will run when the network comes up to display IP before login.
    template:
      src: show-ip-address.j2
      dest: /etc/network/if-up.d/show-ip-address
      mode: a+x
    when: ansible_distribution == 'Debian'

  - name: Copy Ubuntu script which will run when the network comes up to display IP before login.
    copy:
      src: 99-show-ip-address
      dest: /etc/networkd-dispatcher/routable.d/99-show-ip-address
      mode: a+x
    when: ansible_distribution == 'Ubuntu'

  ### SSH ###
  - name: Ensure, that the default user has an ssh authorized key.
    authorized_key:
      user: "{{ iserver_user }}"
      state: present
      key: "{{ iserver_sshkey }}"
    when: user_exists is succeeded

  # UseDNS value is set to no which avoids login delays
  # when the remote client's DNS cannot be resolved
  - name: Disallow root SSH access, only allow SSH key login; UseDNS no.
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    loop:
      - { regexp: '^PermitRootLogin', line: 'PermitRootLogin no' }
      - { regexp: '^PasswordAuthentication', line: 'PasswordAuthentication no' }
      - { regexp: '^UseDNS', line: 'UseDNS no' }
    register: restart_ssh

  - name: Restart SSH.
    service:
      name: ssh
      state: restarted
    when: restart_ssh is changed

  # SSH-HOST-KEYGEN (for KVM template)
  - name: Copy systemd unitfile for OpenSSH Server Key Generation.
    copy:
      src: ssh-host-keygen.service
      dest: /etc/systemd/system/ssh-host-keygen.service
      mode: 0644
    register: enable_ssh_host_keygen
    when: iserver_is_template

  - name: Enable ssh-host-keygen service that generates new SSH host keys on first boot.
    service:
      name: ssh-host-keygen
      enabled: yes
    when: enable_ssh_host_keygen is changed

  - name: Create a file so that ssh-host-keygen.service will run once.
    file:
      path: /etc/run-ssh-host-keygen-once
      state: touch
    when: enable_ssh_host_keygen is changed

  ### CUSTOMIZE ###
  - name: Set timezone.
    timezone:
      name: "{{ iserver_timezone }}"

  - name: Move the original /etc/motd to back it up (once).
    command: mv /etc/motd /etc/motd.original
    args:
      creates: /etc/motd.original
    when: ansible_distribution == 'Debian'

  - name: Copy the file which will show the motd after login.
    copy:
      src: 20-motd-welcome
      dest: /etc/update-motd.d/20-motd-welcome
      mode: a+x
    when: ansible_distribution == 'Debian'

  - name: Remove Ubuntu help-text from motd
    file:
      path: /etc/update-motd.d/10-help-text
      state: absent
    when: ansible_distribution == 'Ubuntu'

  - name: Remove Ubuntu ads from motd
    lineinfile:
      path: /etc/default/motd-news
      state: present
      regexp: '^ENABLED='
      line: 'ENABLED=0'
    when: ansible_distribution == 'Ubuntu'

  - name: Add a block of commands in the default user profile.
    blockinfile:
      path: "/home/{{ iserver_user }}/.profile"
      block: |
        {{ iserver_user_profile }}
      marker: "# {mark} ANSIBLE MANAGED BLOCK"

  # or do it line by line (slower)
  - name: Add a block of bashrc config to root and the default user.
    blockinfile:
      path: "{{ item }}/.bashrc"
      block: |
        {{ iserver_bashrc }}
      marker: "# {mark} ANSIBLE MANAGED BLOCK"
    loop: "{{ iserver_users_dirs }}"

  - name: Customize default user bashrc - prompt is blue.
    lineinfile:
      path: /home/{{ iserver_user }}/.bashrc
      line: 'export PS1="\[\033[1;34m\][\u@\h:\w]$\[\033[0m\] "'

  - name: Customize root bashrc - prompt is red.
    lineinfile:
      path: /root/.bashrc
      line: 'export PS1="\[\033[1;31m\][\u@\h:\w]#\[\033[0m\] "'

  ### CLOUD ###
  - name: Enable the serial console by modifying grub.
    lineinfile:
      path: /etc/default/grub
      state: present
      regexp: '^GRUB_CMDLINE_LINUX_DEFAULT='
      line: 'GRUB_CMDLINE_LINUX_DEFAULT="console=ttyS0 console=tty0"'
    register: update_grub

  - name: Update grub.
    shell: update-grub
    when: update_grub is changed

  # AUTOGROWPART #
  - name: Copy systemd unitfile to automatically Grow Partition after resize by Proxmox.
    copy:
      src: autogrowpart.service
      dest: /etc/systemd/system/autogrowpart.service
      mode: 0644
    register: enable_autogrowpart

  - name: Copy script to automatically Grow Partition after resize by Proxmox.
    copy:
      src: auto_grow_partition.sh
      dest: /usr/local/bin/auto_grow_partition.sh
      mode: a+x

  - name: Enable the autogrowpart service.
    service:
      name: autogrowpart
      enabled: yes
    when: enable_autogrowpart is changed

  ### CLEANUP (for KVM template) ###
  - name: Copy the cleanup script.
    template:
      src: template-cleanup.sh.j2
      dest: /tmp/template-cleanup.sh
      mode: a+x
    when: iserver_is_template

  - name: Run the cleanup script for VM templates (only once).
    shell: /tmp/template-cleanup.sh
    args:
      creates: /etc/.template-cleanup.done
    when: iserver_is_template

  # or use '*'
  - name: Prevent password authentication for root.
    user:
      name: root
      password: '!'
  ## End of block MAIN
  become: true
